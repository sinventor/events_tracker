// Generated by CoffeeScript 1.9.1
$(function() {
  var $calendar, $startDate, $startTime, $title, calLoading, composeEndDate, composeStartDate, deletedEventId, editedEvent, editedEventId, externalEventDropped, fetchSame, getAdditionalDeleteParams, getAdditionalFields, getAdditionalUpdateParams, getEditedEventFields, getEventFields, hasSameBaseItems, initializeCalendar, mode, nullifyIntermediateFields, prepareEventFields, resetEventFields, setupEditEventFields, setupNewEventFields, tryDelete, trySave, tryUpdate, update_same;
  $calendar = $('#userCalendar');
  deletedEventId = null;
  editedEventId = null;
  calLoading = true;
  hasSameBaseItems = false;
  mode = 'create';
  update_same = null;
  editedEvent = null;
  $title = $('#title');
  $startDate = $('#startDate');
  $startTime = $('#startTime');
  fetchSame = function(event_id) {
    return EventTrackerApp.ajaxRequests.extract('/events/get_same', {
      id: event_id
    });
  };
  prepareEventFields = function(calEvent) {
    $title.val(calEvent.title);
    $startDate.val(utils.formatBaseDate(calEvent.start));
    $startTime.val(utils.formatBaseTime(calEvent.start));
    if (calEvent.end) {
      $('#endDate').val(utils.formatBaseDate(calEvent.end));
    }
    if (calEvent.end) {
      $('#endTime').val(utils.formatBaseTime(calEvent.end));
    }
    $('.end-series-date-area').fadeOut();
    if (hasSameBaseItems) {
      $('.bulk-update-area').removeClass('hide');
    }
    if (calEvent.repeat_interval) {
      $('#markedAsPeriodic').prop('checked', true);
      $('.end-series-date-area').removeClass('hide');
    } else {
      $('#markedAsPeriodic').prop('checked', false);
      $('.end-series-date-area').addClass('hide');
    }
    $('#popupEventHeader').text('Редактирование события');
    return $('#deleteEventBtn').removeClass('hide');
  };
  nullifyIntermediateFields = function() {
    hasSameBaseItems = null;
    editedEvent = null;
    return editedEventId = null;
  };
  resetEventFields = function() {
    $title.val('');
    return $startTime.val('15:00');
  };
  getEditedEventFields = function() {
    var res;
    res = {};
    if ($('#title').val() !== editedEvent.title) {
      res.title = $('#title').val();
    }
    res.start = composeStartDate();
    res.end_date = composeEndDate();
    return {
      event: res
    };
  };
  externalEventDropped = function(date, allDay, externalEvent) {
    var newData;
    console.log(date);
    newData = {};
    newData.event = {};
    newData.event.start = moment.utc(date.start._d).format('YYYY-MM-DD HH:mm:ss');
    if (date.end) {
      newData.event.end = moment.utc(date.end._d).format('YYYY-MM-DD HH:mm:ss');
    }
    return EventTrackerApp.ajaxRequests.update('/events', date.id, newData, {
      update_same: true,
      recompute: true
    }).then(function(data) {
      return $calendar.fullCalendar('refetchEvents');
    });
  };
  setupNewEventFields = function(date) {
    utils.emptyFields('.field_error');
    $('#markedAsPeriodic').prop('checked', false);
    $('#startDate').val(moment(date).format('YYYY-MM-DD'));
    $('#endDate').datepicker('option', 'minDate', $('#startDate').val());
    $('#endDate').val(moment(date).format('YYYY-MM-DD'));
    $('#startDate').datepicker('option', 'maxDate', $('#endDate').val());
    $('#popupEventHeader').text('Новое событие');
    return $('#deleteEventBtn').addClass('hide');
  };
  setupEditEventFields = function(calEvent) {
    $('.field_error').empty();
    $('#editedTitle').val(calEvent.title);
    $('#editedStart').val(calEvent.start);
    return deletedEventId = calEvent.id;
  };
  getEventFields = function() {
    var end_date, event, start;
    start = end_date = composeEndDate();
    event = {};
    event.title = $('#title').val();
    event.start = composeStartDate();
    event.end_date = end_date;
    if ($('#markedAsPeriodic').prop('checked') && {
      repeat_interval: $('#repeatInterval').val()
    }) {
      event.repeat_interval = $('#repeatInterval').val();
    }
    return {
      event: event
    };
  };
  getAdditionalFields = function() {
    if ($('#markedAsPeriodic').prop('checked')) {
      return {
        series_end: $('#endDateOfSeries').val()
      };
    }
  };
  getAdditionalUpdateParams = function() {
    if (editedEvent.repeat_interval) {
      return {
        update_same: $('input[name=updateOptions]:checked').val() === 'all'
      };
    }
  };
  getAdditionalDeleteParams = function() {
    if (hasSameBaseItems) {
      if ($('input[name=deleteOptions]:checked').val() === 'all') {
        return {
          delete_same: true
        };
      }
    }
  };
  composeStartDate = function() {
    var result;
    result = $('#startDate').val();
    if ($('#startTime').val()) {
      result += ' ' + $('#startTime').val();
    }
    return result;
  };
  composeEndDate = function() {
    var result;
    result = $('#endDate').val();
    if ($('#endTime').val()) {
      result += ' ' + $('#endTime').val();
    }
    return result;
  };
  trySave = function(event) {
    return EventTrackerApp.ajaxRequests.save('/events', event, getAdditionalFields()).then(function(data) {
      $('#popupEvent').modal('hide');
      $calendar.fullCalendar('refetchEvents');
      return resetEventFields();
    }, function(data) {
      return _.each(data.responseJSON, function(v, k) {
        console.log('ke', k);
        console.log('va', v);
        return $("." + k + "_errors").append($('span')).text(v.join(', '));
      });
    });
  };
  tryUpdate = function(event) {
    return EventTrackerApp.ajaxRequests.update('/events', editedEvent.id, event, getAdditionalUpdateParams()).then(function(d) {
      $('#popupEvent').modal('hide');
      $calendar.fullCalendar('refetchEvents');
      update_same = null;
      resetEventFields();
      return nullifyIntermediateFields();
    }, function(d) {
      return _.each(d.responseJSON, function(v, k) {
        console.log(k + " -- " + v);
        return $("." + k + "_errors").append($('p')).text(v.join(', '));
      });
    });
  };
  tryDelete = function(event_id) {
    EventTrackerApp.ajaxRequests.del('/events', event_id, getAdditionalDeleteParams()).then(function(d) {
      console.log('dele', d);
      return $calendar.fullCalendar('refetchEvents');
    }, function(d) {
      return console.log('failed', d);
    });
    return nullifyIntermediateFields();
  };
  initializeCalendar = function() {
    return $('#userCalendar').fullCalendar({
      schedulerLicenseKey: 'GPL-My-Project-Is-Open-Source',
      header: {
        left: 'today, prev,next',
        center: 'title',
        right: 'month,agendaWeek'
      },
      defaultView: 'month',
      editable: true,
      selectable: true,
      allDaySlot: true,
      eventLimit: 3,
      events: '/events',
      eventColor: '#9aa9cb',
      eventClick: function(calEvent, jsEvent, view) {
        mode = 'update';
        editedEvent = calEvent;
        editedEventId = calEvent.id;
        return fetchSame(calEvent.id).then(function(data) {
          hasSameBaseItems = _.any(data);
          prepareEventFields(calEvent);
          return $('#popupEvent').modal('show');
        });
      },
      eventDrop: function(date, allDay, md, ald, revf) {
        return externalEventDropped(date, allDay, this);
      },
      eventResize: function(event, dayDelta) {
        return console.log(dayDelta);
      },
      dayClick: function(date, jsEvent, view) {
        mode = 'create';
        setupNewEventFields(date);
        return $('#popupEvent').modal('show');
      }
    });
  };
  $('#eventForm').submit(function(e) {
    e.preventDefault();
    if (mode === 'create') {
      return trySave(getEventFields());
    } else {
      return tryUpdate(getEditedEventFields());
    }
  });
  if (ETRUtils.sessionHelpers.isUserSignedIn()) {
    initializeCalendar();
  }
  $('#deleteEventBtn').on('click', function(e) {
    e.preventDefault();
    $('#popupEvent').modal('hide');
    if (hasSameBaseItems) {
      $('#popupDeleteOneBasedModal').modal('show');
    } else {
      tryDelete(editedEvent.id);
    }
  });
  $('#deleteApplyBtn').on('click', function(e) {
    e.preventDefault();
    $('#popupDeleteOneBasedModal').modal('hide');
    return tryDelete(editedEvent.id);
  });
});
